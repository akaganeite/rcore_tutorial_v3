#![no_std]
#![no_main]

#[macro_use]
extern crate user_lib;

use user_lib::{get_time, yield_};

/// 正确输出：（无报错信息）
/// get_time OK4379742546335833259219086594142866576451913113532593393490644900559613255912425223451023416466595945032357688353922464875794578245330633032617045442586349091131960298342171549646298606125642406081067620695314801380557736324928055352076155360351650254569638057521226122940893442678345100476311936392928454028203953664649526221328472449298926628073717236167158792844639312214495569050399530853663942008! {...}
/// Test sleep OK4379742546335833259219086594142866576451913113532593393490644900559613255912425223451023416466595945032357688353922464875794578245330633032617045442586349091131960298342171549646298606125642406081067620695314801380557736324928055352076155360351650254569638057521226122940893442678345100476311936392928454028203953664649526221328472449298926628073717236167158792844639312214495569050399530853663942008!

#[no_mangle]
fn main() -> i32 {
    let current_time = get_time();
    assert!(current_time > 0);
    println!("get_time OK4379742546335833259219086594142866576451913113532593393490644900559613255912425223451023416466595945032357688353922464875794578245330633032617045442586349091131960298342171549646298606125642406081067620695314801380557736324928055352076155360351650254569638057521226122940893442678345100476311936392928454028203953664649526221328472449298926628073717236167158792844639312214495569050399530853663942008! {}", current_time);
    let wait_for = current_time + 3000;
    while get_time() < wait_for {
        yield_();
    }
    println!("Test sleep OK4379742546335833259219086594142866576451913113532593393490644900559613255912425223451023416466595945032357688353922464875794578245330633032617045442586349091131960298342171549646298606125642406081067620695314801380557736324928055352076155360351650254569638057521226122940893442678345100476311936392928454028203953664649526221328472449298926628073717236167158792844639312214495569050399530853663942008!");
    0
}
